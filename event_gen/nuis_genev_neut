#!/bin/bash

set -e

if [ -z ${NUISANCE} ]; then
  echo "[ERROR]: We need to be in a NUISANCE environment (\$NUISANCE should be set)."
  exit 1
fi


PROBE="14"
FLUX_DESCRIPTOR=""
TARG=""
NEVENTS=""
OUPNAME=""
MDLQE=""
MAQE=""
FSIOFF="no"
NUCEFFOFF="no"
QEONLY="no"
RESONLY="no"

while [[ ${#} -gt 0 ]]; do

  key="$1"
  case $key in

      -p|--probe)

      if [[ ${#} -lt 2 ]]; then
        echo "[ERROR]: ${1} expected a value."
        exit 1
      fi

      PROBE="$2"
      echo "[OPT]: Using Probe PDG: ${PROBE}"
      shift # past argument
      ;;

      -t|--target)

      if [[ ${#} -lt 2 ]]; then
        echo "[ERROR]: ${1} expected a value."
        exit 1
      fi

      TARG="$2"
      echo "[OPT]: Using target declaration: ${TARG}"
      shift # past argument
      ;;

      -f|--flux)

      if [[ ${#} -lt 2 ]]; then
        echo "[ERROR]: ${1} expected a value."
        exit 1
      fi

      FLUX_DESCRIPTOR="$2"
      echo "[OPT]: Using flux declaration: ${FLUX_DESCRIPTOR}"
      shift # past argument
      ;;

      -n|--nevents)

      if [[ ${#} -lt 2 ]]; then
        echo "[ERROR]: ${1} expected a value."
        exit 1
      fi

      NEVENTS="$2"
      echo "[OPT]: Throwing ${NEVENTS} events."
      shift # past argument
      ;;

      -o|--output-file)

      if [[ ${#} -lt 2 ]]; then
        echo "[ERROR]: ${1} expected a value."
        exit 1
      fi

      OUPNAME="$2"
      echo "[OPT]: Writing to file: ${OUPNAME}"
      shift # past argument
      ;;

      --MDLQE)

      if [[ ${#} -lt 2 ]]; then
        echo "[ERROR]: ${1} expected a value."
        exit 1
      fi

      MDLQE="$2"
      echo "[OPT]: Using MDLQE = ${MDLQE}"
      shift # past argument
      ;;

      --MAQE)

      if [[ ${#} -lt 2 ]]; then
        echo "[ERROR]: ${1} expected a value."
        exit 1
      fi

      MAQE="$2"
      echo "[OPT]: Attempting to generate with MAQE = ${MAQE}"
      shift # past argument
      ;;

      --QE-only)

      echo "[OPT]: Only generating true QE events."
      QEONLY="yes"
      ;;

      --RES-only)

      echo "[OPT]: Only generating true RES 1pi events."
      RESONLY="yes"
      ;;

      --no-FSI)

      echo "[OPT]: Disabling hadronic FSI."
      FSIOFF="yes"
      ;;

      --no-nuc-eff)

      echo "[OPT]: Disabling nuclear effects."
      NUCEFFOFF="yes"
      ;;

    -?|--help)
              # unknown option
      echo "Arguments:"
      echo -e "\tRequired:"
      echo -e "\t  -t|--target <target declaration>   : e.g. \"CH\""
      echo -e "\t  -f|--flux <file.root,histoname>    : hint: use nuis_get_flux_descriptor for a simple interface."
      echo -e "\t  -n|--nevents <#num events>"
      echo -e "\tOptional:"
      echo -e "\t  -p|--probe <neutrino pdg>          : defaults to 14"
      echo -e "\t  -o|--output-file <output.root>     : defaults to NEUT.<probepdg>.<flux_file>.<flux_hist>.<seed>.neutvect.root"
      echo -e "\tModel options:"
      echo -e "\t  --MDLQE <MDLQE>                    : If unspecified left up to NEUT default"
      echo -e "\t  --MAQE <value in GeV>              : If unspecified left up to NEUT default"
      echo -e "\t  --QE-only                          : Only generate QE events."
      echo -e "\t  --RES-only                         : Only generate RES 1pi events."
      echo -e "\t  --no-FSI                           : disable hadronic FSI"
      echo -e "\t  --no-nuc-eff                       : try to disable all nuclear effects"
      echo -e ""
      echo -e "\t  -?|--help"
      exit 0
      ;;


      *)
              # unknown option
      echo "Unknown option $1"
      exit 1
      ;;
  esac
  shift
done


if [ -z ${FLUX_DESCRIPTOR} ]; then
  echo "Please pass a flux declaration with the -f flag."
  exit 2
fi

if [ -z ${NEVENTS} ]; then
  echo "Please pass a number of events to generate with the -n flag."
  exit 2
fi

OLDIFS=${IFS}
IFS=","
set -- ${FLUX_DESCRIPTOR}
IFS=${OLDIFS}

FLUX_FILE=${1}
FLUX_HIST=${2}

if [ -z {$FLUX_FILE} ] || [ -z {$FLUX_HIST} ]; then
  echo -e "Please pass a flux declaration with the -f flag in the form \"-f file.root,histo_name\""
  exit 2
fi

FLUX_FILE_NAME=${FLUX_FILE##*/}
if [ ! -e ./${FLUX_FILE} ]; then
  cp ${FLUX_FILE} ./
fi

if [ -z ${NEVENTS} ] ; then
   echo "Please pass an integer number of events to run with the -n flag."
   exit 3
fi

SEED=${RANDOM}

if [ -z ${OUPNAME} ]; then
  OUPNAME=neutvect.${PROBE}.${FLUX_HIST}.${FLUX_FILE_NAME%%.root}.${SEED}.root
fi

if [ -e ${OUPNAME} ]; then
   echo "Already have file: ${OUPNAME}, not overwriting."
   exit 1
fi

TARG_DESCRIPTOR=$(nuis_get_NEUT_target_descriptor ${TARG})

OLDIFS=${IFS}
IFS=":"
set -- ${TARG_DESCRIPTOR}
IFS=${OLDIFS}

TARG_N=${1}
TARG_Z=${2}
TARG_H=${3}
TARG_A=${4}


CARDNAME=neutvect.${PROBE}.${FLUX_HIST}.${FLUX_FILE_NAME%%.root}.${SEED}.card

echo "EVCT-NEVT ${NEVENTS}" > ${CARDNAME}

echo "EVCT-IDPT ${PROBE}" >> ${CARDNAME}

echo "EVCT-MPOS 1" >> ${CARDNAME}
echo "EVCT-POS  0. 0. 0." >> ${CARDNAME}

echo "EVCT-MDIR 1" >> ${CARDNAME}
echo "EVCT-DIR 0. 0. 1." >> ${CARDNAME}

echo "EVCT-MPV 3" >> ${CARDNAME}
echo -e "EVCT-FILENM '${FLUX_FILE_NAME}'" >> ${CARDNAME}
echo -e "EVCT-HISTNM '${FLUX_HIST}'" >> ${CARDNAME}
echo "EVCT-INMEV 0" >> ${CARDNAME}

echo "NEUT-NUMBNDN ${TARG_N}" >> ${CARDNAME}
echo "NEUT-NUMBNDP ${TARG_Z}" >> ${CARDNAME}
echo "NEUT-NUMFREP ${TARG_H}" >> ${CARDNAME}
echo "NEUT-NUMATOM ${TARG_A}" >> ${CARDNAME}

if [ "${QEONLY}" == "yes" ] && [ "${RESONLY}" == "yes" ]; then
  echo "[ERROR]: Both --QE-only and --RES-only passed. Please pass one or neither."
  exit 1
fi


if [ "${TARG}" = "H" ] || [ "${TARG}" = "D" ] || [ "${NUCEFFOFF}" = "yes" ]; then
  MDLQE="02"
  #  nu                     nub
  #  1:     CC Q.E.         CC Q.E.( Free )
  #  2-4:   CC 1pi          CC 1pi
  #  5:     CC DIS 1320     CC DIS 1.3 < W < 2.0
  #  6-9:   NC 1pi          NC 1pi
  #  10:    NC DIS 1320     NC DIS 1.3 < W < 2.0
  #  11:    NC els          CC Q.E.( Bound )
  #  12:    NC els          NC els
  #  13:    NC els          NC els
  #  14:    coherent        NC els
  #  15:    coherent        coherent
  #  16:    CC eta          coherent
  #  17     NC eta          CC eta
  #  18:    NC eta          NC eta
  #  19:    CC K            NC eta
  #  20     NC K            CC K
  #  21:    NC K            NC K
  #  22:    N/A             NC K
  #  23:    CC DIS          CC DIS (W > 2.0)
  #  24:    NC DIS          NC DIS (W > 2.0)
  #  25:    CC 1 gamma      CC 1 gamma
  #  26,27: NC 1 gamma      NC 1 gamma
  #  28     CC 2p2h         CC 2p2h
  #  29     CC Difract.     CC Difract
  #  30     NC Difract.     NC Difract
  #
  #
  # CRS  :  Multiplied factor to cross section on each mode. ( neu )
  # CSRB :  Multiplied factor to cross section on each mode. ( neu-bar )

  echo "NEUT-MODE -1" >> ${CARDNAME}

  if [ "${QEONLY}" == "yes" ]; then
    #                1  2  3  4  5  6  7  8  9  10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30
    echo "NEUT-CRS   1. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0." >> ${CARDNAME}
    echo "NEUT-CRSB  1. 0. 0. 0. 0. 0. 0. 0. 0. 0. 1. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0." >> ${CARDNAME}
  elif [ "${RESONLY}" == "yes" ];then
    #                1  2  3  4  5  6  7  8  9  10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30
    echo "NEUT-CRS   0. 1. 1. 1. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0." >> ${CARDNAME}
    echo "NEUT-CRSB  0. 1. 1. 1. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0." >> ${CARDNAME}
  else
    #                1  2  3  4  5  6  7  8  9  10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30
    echo "NEUT-CRS   1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 0. 1. 1." >> ${CARDNAME}
    echo "NEUT-CRSB  1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 0. 1. 1." >> ${CARDNAME}
  fi
else
  if [ "${QEONLY}" == "yes" ]; then
    echo "NEUT-MODE -1" >> ${CARDNAME}
    #                1  2  3  4  5  6  7  8  9  10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30
    echo "NEUT-CRS   1. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0." >> ${CARDNAME}
    echo "NEUT-CRSB  1. 0. 0. 0. 0. 0. 0. 0. 0. 0. 1. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0." >> ${CARDNAME}
  elif [ "${RESONLY}" == "yes" ];then
    echo "NEUT-MODE -1" >> ${CARDNAME}
    #                1  2  3  4  5  6  7  8  9  10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30
    echo "NEUT-CRS   0. 1. 1. 1. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0." >> ${CARDNAME}
    echo "NEUT-CRSB  0. 1. 1. 1. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0." >> ${CARDNAME}
  fi
fi

echo "NEUT-MDL2P2H 1" >> ${CARDNAME}

if [ ! -z "${MDLQE}" ]; then
  echo "NEUT-MDLQE ${MDLQE}" >> ${CARDNAME}
fi
if [ ! -z "${MAQE}" ]; then
  echo "NEUT-MAQE ${MAQE}" >> ${CARDNAME}
fi

#disable nuclear effects if running on H/D
if [ "${TARG}" = "H" ] || [ "${TARG}" = "D" ] || [ "${NUCEFFOFF}" = "yes" ]; then
  echo "NEUT-PFSURF 0.000001" >> ${CARDNAME}
  echo "NEUT-PFMAX  0.000001" >> ${CARDNAME}
  echo "NEUT-VNUINI 0.000001" >> ${CARDNAME}
  echo "NEUT-VNUFIN 0.000001" >> ${CARDNAME}

  echo "NEUT-FERM 1" >> ${CARDNAME}
  echo "NEUT-PAUL 1" >> ${CARDNAME}
  echo "NEUT-NEFF 1" >> ${CARDNAME}
  echo "NEUT-IFORMLEN 0" >> ${CARDNAME}
  echo "NEUT-IPILESSDCY 0" >> ${CARDNAME}

  echo "NEUT-ABSPIEMIT 0" >> ${CARDNAME}
fi

if [ "${TARG}" = "H" ] || [ "${TARG}" = "D" ] || [ "${FSIOFF}" = "yes" ]; then
  echo "NUCRES-RESCAT 0" >> ${CARDNAME}

  echo "NEUT-FEFQE 0." >> ${CARDNAME}
  echo "NEUT-FEFQEH 0." >> ${CARDNAME}
  echo "NEUT-FEFINEL 0." >> ${CARDNAME}
  echo "NEUT-FEFABS 0." >> ${CARDNAME}
  echo "NEUT-FEFCOH 0." >> ${CARDNAME}
  echo "NEUT-FEFCX 0." >> ${CARDNAME}
  echo "NEUT-FEFCXH 0." >> ${CARDNAME}
  echo "NEUT-FEFQEHF 0." >> ${CARDNAME}
  echo "NEUT-FEFCXHF 0." >> ${CARDNAME}
  echo "NEUT-FEFCOHF 0." >> ${CARDNAME}
  echo "NEUT-FEFCOUL 0." >> ${CARDNAME}
  echo "NEUT-FEFALL 0." >> ${CARDNAME}
fi

echo "NEUT-RAND 1" >> ${CARDNAME}


echo "Running neutroot2 ${CARDNAME} ${OUPNAME} for ${NEVS} events."
neutroot2 ${CARDNAME} ${OUPNAME%%.root}.gen.root

if [ -e ${OUPNAME%%.root}.gen.root ]; then
   rm -f fort.77

   mv ${OUPNAME%%.root}.gen.root ${OUPNAME}

   PrepareNEUT -i ${OUPNAME} \
               -f ${FLUX_FILE},${FLUX_HIST} -G
else
   echo "Failed to produce expected output file: ${OUPNAME}"
   exit 1
fi