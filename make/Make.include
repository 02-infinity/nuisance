#
# The compile and linking options for  building NEUT fit based on 
# the flags used when running the configure script:
# Type './configure --help' for more information
#
# Authors:
# Costas Andreopoulos <costas.andreopoulos \at stfc.ac.uk>
#  STFC - Rutherford Appleton Laboratory, UK
#
# Jim Dobson <j.dobson07 \at imperial.ac.uk>
#  Imperial College London, UK
#
# Patrick de Perio <pdeperio \at physics.utoronto.ca>
#  University of Toronto, Canada
#
# Callum Wilkinson <callum.wilkinson \at sheffield.ac.uk>
#  University of Sheffield, UK

#-------------------------------------------------------------------
#                 Read in configure script output
#-------------------------------------------------------------------
# Include file generated by the configure script
include $(EXT_FIT)/make/Make.config

ifndef EXT_FIT_OPTION_CXX_USERDEF_FLAGS
 EXT_FIT_OPTION_CXX_USERDEF_FLAGS=
endif

ifndef EXT_FIT_OPTION_CXX_DEBUG_FLAG
 EXT_FIT_OPTION_CXX_DEBUG_FLAG=
endif

ifndef EXT_FIT_OPTION_CXX_OPTIMIZ_FLAG
 EXT_FIT_OPTION_CXX_OPTIMIZ_FLAG=
endif

#-------------------------------------------------------------------
#                           ARCHITECTURE 
#-------------------------------------------------------------------
# As defined by ROOT
ARCH    = $(shell root-config --arch)  
ARCH_OK = 

#-------------------------------------------------------------------
#                              ROOT
#-------------------------------------------------------------------
# ROOT headers and libraries

ROOT_INCLUDES  = -I$(shell root-config --incdir)
ROOT_LIBRARIES = $(shell root-config --glibs) -lMinuit2 -lGeom -lEG 

ifeq ($(strip $(EXT_FIT_OPTION_ENABLE_GENIE)),YES)
ROOT_LIBRARIES := $(ROOT_LIBRARIES) -lEGPythia6
endif

#-------------------------------------------------------------------
#                              oaAnalysis
#-------------------------------------------------------------------
# oaAnalysis headers and libraries
#
ifeq ($(strip $(EXT_FIT_OPTION_ENABLE_OAANALYSIS)),YES)
OAANALYSIS_LIBRARIES := -L$(EXT_FIT_OPTION_WITH_OAANALYSIS_LIB) -lReadoaAnalysis
OAANALYSIS_INCLUDES :=  -I$(EXT_FIT_OPTION_WITH_OAANALYSIS_LIB)
else
OAANALYSIS_LIBRARIES = 
OAANALYSIS_INCLUDES = 
endif


#-------------------------------------------------------------------
#                              GENIE
#-------------------------------------------------------------------
# GENIE headers and libraries
#
ifeq ($(strip $(EXT_FIT_OPTION_ENABLE_GENIE)),YES)

GENIE_INCLUDES  = -I$(shell genie-config --topsrcdir)
GENIE_LIBRARIES = $(shell genie-config --libs) 

# GENIE_LIBRARIES := $(GENIE_LIBRARIES) -lprofiler 
GENIE_INCLUDES  := $(GENIE_INCLUDES) -I$(GENIE)/src/GHEP -I$(GENIE)/src/Ntuple -I$(GENIE)/src/ReWeight

else
GENIE_INCLUDES  =
GENIE_LIBRARIES =
endif


# PYTHIA6 dir/lib/object file
PYTHIA_DIR = $(EXT_FIT_OPTION_WITH_PYTHIA6_LIB)
PYTHIA_O   = $(wildcard $(PYTHIA_DIR)/pythia*.o) # match all vrs

PYTHIA_LIBRARIES  = -L$(PYTHIA_DIR) -lPythia6 $(PYTHIA_O)


# XML lib & include directories
ifdef EXT_FIT_OPTION_WITH_LIBXML2_INC
XML_INC_DIR = $(EXT_FIT_OPTION_WITH_LIBXML2_INC)
else
XML_INC_DIR = /home/stowell/software/libxml2/include
endif

ifdef EXT_FIT_OPTION_WITH_LIBXML2_LIB
XML_LIB_DIR = $(EXT_FIT_OPTION_WITH_LIBXML2_LIB)
else
XML_LIB_DIR = /home/stowell/software/libxml2
endif

# XML libraries and headers
XML_INCLUDES  := -I$(XML_INC_DIR)
XML_LIBRARIES := -L$(XML_LIB_DIR) -lxml2

# log4cpp lib & include directory
ifdef EXT_FIT_OPTION_WITH_LOG4CPP_INC
LOG_INC_DIR = $(EXT_FIT_OPTION_WITH_LOG4CPP_INC)
else
LOG_INC_DIR = /usr/local/src/log4cpp/include/
endif

ifdef EXT_FIT_OPTION_WITH_LOG4CPP_LIB
LOG_LIB_DIR = $(EXT_FIT_OPTION_WITH_LOG4CPP_LIB)
else
LOG_LIB_DIR = /usr/local/lib
endif

# log4cpp libraries and headers
LOG_INCLUDES  := -I$(LOG_INC_DIR)
LOG_LIBRARIES := -L$(LOG_LIB_DIR) -llog4cpp


LHAPDF_INCLUDES = -I$(EXT_FIT_OPTION_WITH_LHAPDF_INC)

ifeq ($(strip $(ARCH)),macosx)
LHAPDF_LIBRARIES = -L$(EXT_FIT_OPTION_WITH_LHAPDF_LIB) -lLHAPDF /usr/local/lib/libgfortran.dylib

have_g2c := $wildcard(/usr/local/lib/libg2c.dylib)
ifeq ($(strip $(have_g2c)),)
else
LHAPDF_LIBRARIES := $(LHAPDF_LIBRARIES) /usr/local/lib/libg2c.dylib
endif

else
LHAPDF_LIBRARIES = -L$(EXT_FIT_OPTION_WITH_LHAPDF_LIB) -lLHAPDF -L/usr/lib -L/usr/lib64 
endif



 #-------------------------------------------------------------------
#                              NEUT
#-------------------------------------------------------------------
#
ifeq ($(strip $(EXT_FIT_OPTION_ENABLE_NEUT)),YES)

# NEUT headers and libraries

  NEUT_MACHINE   = $(shell Machine)
  NEUT_LIB_DIR   = $(NEUT_ROOT)/lib/$(NEUT_MACHINE)

  NEUT_CLASS_DIR = $(NEUT_ROOT)/src/neutclass

# neutclass:
  NEUT_CLASS_LIBS = $(NEUT_CLASS_DIR)/neutpart.so $(NEUT_CLASS_DIR)/neutfsipart.so \
                    $(NEUT_CLASS_DIR)/neutvect.so $(NEUT_CLASS_DIR)/neutfsivert.so \
		    $(NEUT_CLASS_DIR)/neutvtx.so $(NEUT_CLASS_DIR)/neutrootTreeSingleton.so \
                    $(NEUT_CLASS_DIR)/neutnucfsistep.so $(NEUT_CLASS_DIR)/neutnucfsivert.so

# CERN Libraries
  
  CERN_ROOT=$(EXT_FIT_OPTION_WITH_CERN)
  CERNLIB=${CERN}/${CERN_LEVEL}/lib/libjetset74.a \
          ${CERN}/${CERN_LEVEL}/lib/libpdflib804.a \
          -L$(CERN_ROOT)/lib `cernlib jetset74 photos202 mathlib packlib kernlib`
  CERNINC=-I$(CERN_ROOT)/inc


ifeq ($(strip $(EXT_FIT_OPTION_ENABLE_T2KREWEIGHT)),YES)
  NEUT_LIBRARIES := $(NEUT_LIBRARIES) -L$(NEUT_ROOT)/src/reweight -lNReWeight
  NEUT_INCLUDES  := $(NEUT_INCLUDES) -I$(NEUT_ROOT)/src/reweight 
endif

  NEUT_LIBRARIES := $(NEUT_LIBRARIES) -L$(NEUT_LIB_DIR) -lneutcore -lnuceff -lnuccorrspl -lpartnuck -lskmcsvc -ltauola \
  		   $(NEUT_CLASS_LIBS) $(CERNLIB)
  NEUT_INCLUDES  := $(NEUT_INCLUDES) -I$(NEUT_CLASS_DIR) -I$(NEUT_ROOT)/include $(CERNINC) -I$(NEUT_ROOT)/src/neutgeom -I$(NEUT_ROOT)/src/pionsmpl

else
  NEUT_INCLUDES  = 
  NEUT_LIBRARIES = 
endif


#-------------------------------------------------------------------
#                              NUWRO
#-------------------------------------------------------------------
# NIWG headers and libraries
#

ifeq ($(strip $(EXT_FIT_OPTION_WITH_NUWRO)),YES)
     __NUWRO_ENABLED__=YES
     NUWRO_LIBRARIES = -D__NUWRO_ENABLED__=YES -L$(NUWRO)/bin -L$(NUWRO)/build/Linux/lib -levent
     NUWRO_INCLUDES =  -I$(NUWRO)/build/Linux/bin -I$(NUWRO)/src -I$(NUWRO)/src/params  -I$(NUWRO)/build/src
     ROOT_LIBRARIES +=  -lPythia6 -lEGPythia6	     

     ifeq ($(strip $(EXT_FIT_OPTION_WITH_NUWRO_REWEIGHT)),YES)
     __NUWRO_REWEIGHT_ENABLED__=YES
     NUWRO_LIBRARIES := $(NUWRO_LIBRARIES) -lreweight
     NUWRO_INCLUDES  := $(NUWRO_INCLUDES)  -I$(NUWRO)/src/reweight
     endif

else
   NUWRO_INCLUDES = 
   NUWRO_LIBRARIES = 
endif



#-------------------------------------------------------------------
#                              NIWG
#-------------------------------------------------------------------
# NIWG headers and libraries
#

ifeq ($(strip $(EXT_FIT_OPTION_ENABLE_NIWG)),YES)

# NIWG headers and libraries
  
  NIWG_LIBRARIES = -L$(NIWGREWEIGHT) -lNIWGReWeight 
  NIWG_INCLUDES  = -I$(NIWGREWEIGHT) 

else
  NIWG_INCLUDES  = 
  NIWG_LIBRARIES =
endif


#-------------------------------------------------------------------
#                   PROFILING / DEBUGGING OPTIONS
#-------------------------------------------------------------------
# Linking in the Google Profiling Tool library
#
GPROF_LIBRARIES = 
ifdef EXT_FIT_OPTION_PROFILER
  ifdef GPROFILER_LIB
    GPROF_LIBRARIES += -L$(GPROFILER_LIB) -lprofiler
  else
    GPROF_LIBRARIES += -L/usr/local/lib -lprofiler
  endif
endif

#-------------------------------------------------------------------
#                      T2KReWeight
#-------------------------------------------------------------------
ifeq ($(strip $(EXT_FIT_OPTION_ENABLE_T2KREWEIGHT)),YES)
# release info
T2KREWEIGHT_VERSION     = $(shell awk '{print $0}' $(T2KREWEIGHT)/VERSION)
T2KREWEIGHT_LIB_VERSION = -$(T2KREWEIGHT_VERSION)

# paths
T2KREWEIGHT_LIB_PATH := $(T2KREWEIGHT)/lib
T2KREWEIGHT_BIN_PATH := $(T2KREWEIGHT)/bin
T2KREWEIGHT_SRC_PATH := $(T2KREWEIGHT)/src

# libnames
T2KREWEIGHT_LIB := libT2KReWeight

# dictionary names
T2KREWEIGHT_DICT := $(T2KREWEIGHT)/src/_ROOT_DICT_ReWeight

# includes
T2KREWEIGHT_INCLUDES := -I$(T2KREWEIGHT_SRC_PATH)

# libraries
T2KREWEIGHT_LIBRARIES := -L$(T2KREWEIGHT_LIB_PATH) -lT2KReWeight
endif

#-------------------------------------------------------------------
#                      External Data Fit
#-------------------------------------------------------------------

# release info
#EXT_FIT_VERSION     = $(shell awk '{print $0}' $(EXT_FIT)/VERSION)
#EXT_FIT_LIB_VERSION = -$(EXT_FIT_VERSION)

# paths
EXT_FIT_LIB_PATH := $(EXT_FIT)/lib
EXT_FIT_BIN_PATH := $(EXT_FIT)/bin
EXT_FIT_SRC_PATH := $(EXT_FIT)

# libnames
EXT_FIT_LIB := libExternalDataFit

# includes
EXT_FIT_INCLUDES := -I$(EXT_FIT_SRC_PATH)/  -I$(EXT_FIT_SRC_PATH)/src/FitBase/  -I$(EXT_FIT_SRC_PATH)/src/ANL -I$(EXT_FIT_SRC_PATH)/src/BEBC -I$(EXT_FIT_SRC_PATH)/src/FNAL -I$(EXT_FIT_SRC_PATH)/src/BNL -I$(EXT_FIT_SRC_PATH)/src/GGM -I$(EXT_FIT_SRC_PATH)/src/MINERvA -I$(EXT_FIT_SRC_PATH)/src/MiniBooNE -I$(EXT_FIT_SRC_PATH)/src/K2K -I$(EXT_FIT_SRC_PATH)/src/FCN -I$(EXT_FIT_SRC_PATH)/src/Utils -I$(EXT_FIT_SRC_PATH)/src/T2K -I$(EXT_FIT_SRC_PATH)/src/Devel -I$(EXT_FIT_SRC_PATH)/src/Minimizer -I$(EXT_FIT_SRC_PATH)/src/MCStudies

# libraries
EXT_FIT_LIBRARIES := -L$(EXT_FIT_LIB_PATH) -lExternalDataFit_base -lExternalDataFit_ANL -lExternalDataFit_FNAL -lExternalDataFit_BEBC -lExternalDataFit_BNL -lExternalDataFit_GGM -lExternalDataFit_MINERvA -lExternalDataFit_MiniBooNE -lExternalDataFit_K2K -lExternalDataFit_Utils -lExternalDataFit_T2K -lExternalDataFit_FCN -lExternalDataFit_Minimizer -lExternalDataFit_MCStudies


#-------------------------------------------------------------------
#                       Some global variables
#-------------------------------------------------------------------
MAKE   := gmake
RM      = rm -f
MKDIR   = mkdir -p
CAT     = cat
SYMLINK = ln -sf
COPY    = cp
INSTALL = @INSTALL@

# AR, ARFLAGS and RANLIB are for manipulating an archive
AR        = ar
ARFLAGS   = rv
RANLIB    = ranlib

#-------------------------------------------------------------------
#                        COMPILER OPTIONS
#-------------------------------------------------------------------

# -- gcc

CXX = g++ 
LD  = g++ 

# get gcc version & split in '.' delimited tokens (major/minor/revison num.)
CXXVRS      = $(shell $(CXX) -dumpversion)
CXXVRS_MAJ  = $(shell awk 'BEGIN {\
		str="$(CXXVRS)"; split(str, tk, "."); print tk[1]}')
CXXVRS_MIN  = $(shell awk 'BEGIN {\
		str="$(CXXVRS)"; split(str, tk, "."); print tk[2]}')
CXXVRS_REV  = $(shell awk 'BEGIN {\
		str="$(CXXVRS)"; split(str, tk, "."); print tk[3]}')

# gcc version >= 4.1.0 ?
GCC_GE_4_1_0  = $(shell awk 'BEGIN {\
		if($(CXXVRS_MAJ)>=4 && $(CXXVRS_MIN)>0) print "YES"}') 

# MAC OS X 32bit (as defined by root) with gcc
# ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
ifeq ($(strip $(ARCH)),macosx) 
ARCH_OK       = YES
CXXFLAGS      = -m32 -pipe -W -Wall -O3 -Weffc++ \
		-fsigned-char -fno-common -flat_namespace -undefined warning -fopenmp\
		$(EXT_FIT_OPTION_CXX_DEBUG_FLAG) \
		$(EXT_FIT_OPTION_CXX_OPTIMIZ_FLAG) \
		$(EXT_FIT_OPTION_CXX_USERDEF_FLAGS) 
ifeq ($(strip $(GCC_GE_4_1_0)), YES) 
  CXXFLAGS += -Wno-strict-aliasing -ffriend-injection
else
  CXXFLAGS += -Wno-long-double
endif

LDFLAGS       = -m32 -bind_at_load -undefined warning 
SOFLAGS       = -m32 -dynamiclib -flat_namespace \
		-single_module -undefined dynamic_lookup -undefined warning
DllSuf       := dylib
DllLinkSuf   := so
StaticLibSuf := a
ObjSuf       := o
SrcSuf       := cxx
FORT         := g77
FORTOPTS     := $(FFLAGS) -g -c -O2 -DLINUX $(F77INCS) -fno-second-underscore
RANLIB       := ranlib
SOCMD         = $(LD)
OutPutOpt     = -o
SOMINF =
endif

# MAC OS X 64bit (as defined by root) with gcc
# ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
ifeq ($(strip $(ARCH)),macosx64) 
ARCH_OK       = YES
CXXFLAGS      = -m64 -pipe -W -Wall \
		-fsigned-char -fno-common -flat_namespace \
		$(EXT_FIT_OPTION_CXX_DEBUG_FLAG) \
		$(EXT_FIT_OPTION_CXX_OPTIMIZ_FLAG) \
		$(EXT_FIT_OPTION_CXX_USERDEF_FLAGS) 
ifeq ($(strip $(GCC_GE_4_1_0)), YES) 
  CXXFLAGS += -Wno-strict-aliasing -ffriend-injection
else
  CXXFLAGS += -Wno-long-double
endif

LDFLAGS       = -m64 -bind_at_load
SOFLAGS       = -m64 -dynamiclib -flat_namespace \
		-single_module -undefined dynamic_lookup
DllSuf       := dylib
DllLinkSuf   := so
StaticLibSuf := a
ObjSuf       := o
SrcSuf       := cxx
FORT         := g77
FORTOPTS     := $(FFLAGS) -g -c -O -DLINUX $(F77INCS) -fno-second-underscore
RANLIB       := ranlib
SOCMD         = $(LD)
OutPutOpt     = -o
SOMINF =
endif

# LINUX / 32-bit x86 / with gcc
# ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
ifeq ($(strip $(ARCH)),linux) 
ARCH_OK       = YES
CXXFLAGS      = -Wall -fPIC -O2  \
		$(EXT_FIT_OPTION_CXX_DEBUG_FLAG) \
		$(EXT_FIT_OPTION_CXX_OPTIMIZ_FLAG) \
		$(EXT_FIT_OPTION_CXX_USERDEF_FLAGS)
ifeq ($(strip $(GCC_GE_4_1_0)), YES) 
  CXXFLAGS += -Wno-strict-aliasing -ffriend-injection
endif
LDFLAGS       = -g
SOFLAGS       = -shared -z muldefs
DllSuf       := so
DllLinkSuf   := 
StaticLibSuf := a
ObjSuf       := o
SrcSuf       := cxx
FORT         := g77
FORTOPTS     := $(FFLAGS) -g -c -O -DLINUX $(F77INCS) -fno-second-underscore
RANLIB       := ranlib
SOCMD         = $(LD)
OutPutOpt     = -o
SOMINF =
endif

# LINUX / 64-bit x86 / with gcc
# ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
ifeq ($(strip $(ARCH)),linuxx8664gcc) 
ARCH_OK       = YES
CXXFLAGS      = -fPIC  -O2 \
		$(EXT_FIT_OPTION_CXX_DEBUG_FLAG) \
		$(EXT_FIT_OPTION_CXX_OPTIMIZ_FLAG) \
		$(EXT_FIT_OPTION_CXX_USERDEF_FLAGS) 
ifeq ($(strip $(GCC_GE_4_1_0)), YES) 
  CXXFLAGS += -Wno-strict-aliasing -ffriend-injection
endif
LDFLAGS       = -g
SOFLAGS       = -shared -Xlinker -zmuldefs 
DllSuf       := so
DllLinkSuf   := 
StaticLibSuf := a
ObjSuf       := o
SrcSuf       := cxx
FORT         := g77
FORTOPTS     := $(FFLAGS) -g -c -O -DLINUX $(F77INCS) -fno-second-underscore
RANLIB       := ranlib
SOCMD         = $(LD)
OutPutOpt     = -o
SOMINF =
endif

#-------------------------------------------------------------------
#                            SUMMING-UP
#-------------------------------------------------------------------

# LIBS should contain general libraries needed to compile programs. 

LIBRARIES := $(SYSLIBS) \
	     $(ROOT_LIBRARIES) \
	     $(EXT_FIT_LIBRARIES) \
	     

ifeq ($(strip $(ARCH)),macosx) 
LIBRARIES := $(SYSLIBS) \
	     $(ROOT_LIBRARIES) \
	     $(EXT_FIT_LIBRARIES) \
	     $(GPROF_LIBRARIES)
endif

INCLUDES := $(ROOT_INCLUDES) \
	    $(EXT_FIT_INCLUDES)


ifeq ($(strip $(EXT_FIT_OPTION_ENABLE_T2KREWEIGHT)),YES)
LIBRARIES := $(LIBRARIES) $(T2KREWEIGHT_LIBRARIES) 
INCLUDES := $(INCLUDES) $(T2KREWEIGHT_INCLUDES)
endif



ifeq ($(strip $(EXT_FIT_OPTION_ENABLE_OAANALYSIS)),YES)
LIBRARIES := $(LIBRARIES) \
	     $(OAANALYSIS_LIBRARIES) 
INCLUDES  := $(INCLUDES) \
	     $(OAANALYSIS_INCLUDES)
endif

ifeq ($(strip $(EXT_FIT_OPTION_ENABLE_NEUT)),YES)
LIBRARIES := $(LIBRARIES) \
	     $(NEUT_LIBRARIES) 
#	     $(XML_LIBRARIES) \
#	     $(LOG_LIBRARIES) \
#	     $(LHAPDF_LIBRARIES) \
#	     $(PYTHIA_LIBRARIES)
	     
INCLUDES  := $(INCLUDES) \
	     $(NEUT_INCLUDES) 
#	     $(XML_INCLUDES) \
#	     $(LHAPDF_INCLUDES) \
#	     $(LOG_INCLUDES) 
endif

#LIBRARIES := $(LHAPDF_LIBRARIES) \
#	  $(LOG_LIB_DIR) \
#	  $(XML_LIBRARIES) \
#	  $(PYTHIA_LIBRARIES)

#INCLUDES  := $(INCLUDES) \
#	  $(XML_INCLUDES) \
#	  $(LHAPDF_INCLUDES) \
#	  $(LOG_INC_DIR)

ifeq ($(strip $(EXT_FIT_OPTION_ENABLE_GENIE)),YES) 
LIBRARIES := $(LIBRARIES) \
	  $(GENIE_LIBRARIES) \
	  $(LHAPDF_LIBRARIES) \
	  $(LOG_LIBRARIES) \
	  $(XML_LIBRARIES) \
	  $(PYTHIA_LIBRARIES)                           
INCLUDES  := $(INCLUDES) \
	  $(GENIE_INCLUDES) \
	  $(XML_INCLUDES) \
	  $(LHAPDF_INCLUDES) \
	  $(LOG_INCLUDES)
endif  



ifeq ($(strip $(EXT_FIT_OPTION_WITH_NUWRO)),YES)
LIBRARIES := $(LIBRARIES) \
             $(NUWRO_LIBRARIES)
INCLUDES  := $(INCLUDES) \
             $(NUWRO_INCLUDES)
endif

ifeq ($(strip $(EXT_FIT_OPTION_ENABLE_NIWG)),YES)
LIBRARIES := $(LIBRARIES) \
	     $(NIWG_LIBRARIES)
INCLUDES  := $(INCLUDES) \
	     $(NIWG_INCLUDES)
endif



# Default compiler and preprocessor flags

CFLAGS    = -g
# CWRET warn on a lot more than Wno-write-strings!
# Also add Werror and Wfatal-errors
#CXXFLAGS := $(CFLAGS) $(ENV_CXXFLAGS) $(CXXFLAGS) -Wno-write-strings -Xlinker -zmuldefs
CXXFLAGS := $(CFLAGS) $(ENV_CXXFLAGS) $(CXXFLAGS) -Wall -Wextra -Xlinker -zmuldefs
CPPFLAGS  = $(INCLUDES) 
LDFLAGS  := $(LDFLAGS) -Xlinker -zmuldefs 

#-------------------------------------------------------------------
#                            MAKE RULES
#-------------------------------------------------------------------

.SUFFIXES : .inc .cxx

#.cc.o:
#	$(CXX) -c -o $@ $(CXXFLAGS) $(CPPFLAGS) $<

#.cxx.o:
#	$(CXX) -c -o $@ $(CXXFLAGS) $(CPPFLAGS) $<

.cc.o:
	$(CXX) -c $(CXXFLAGS) $(CPPFLAGS) $<

.cxx.o:
	$(CXX) -c $(CXXFLAGS) $(CPPFLAGS) $<

.C.o:
	$(CXX) -c -o $@ $(CXXFLAGS) $(CPPFLAGS) $<

.c.o:
	$(CC) -c -o $@ $(CXXFLAGS) $(CPPFLAGS) $<

.F.o :
	$(FORT) $(FORTOPTS) -o $@ $<

.f.o :
	$(FORT) $(FORTOPTS) -o $@ $<

.F.a :
	$(FORT) $(FORTOPTS) -o $*.o $<
	$(AR) $(ARFLAGS) $@ $*.o
	$(RANLIB) $@
	$(RM) $*.o

.f.a :
	$(FORT) $(FORTOPTS) -o $*.o $<
	$(AR) $(ARFLAGS) $@ $*.o
	$(RANLIB) $@
	$(RM) $*.o
